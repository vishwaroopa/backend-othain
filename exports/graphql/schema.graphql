input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Article {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  description: String!
  content: String!
  slug: String!
  category: Category
  image: UploadFile
  author: Writer
  test: String
  published_at: DateTime
}

type ArticleConnection {
  values: [Article]
  groupBy: ArticleGroupBy
  aggregate: ArticleAggregator
}

type ArticleAggregator {
  count: Int
  totalCount: Int
}

type ArticleGroupBy {
  id: [ArticleConnectionId]
  created_at: [ArticleConnectionCreated_at]
  updated_at: [ArticleConnectionUpdated_at]
  title: [ArticleConnectionTitle]
  description: [ArticleConnectionDescription]
  content: [ArticleConnectionContent]
  slug: [ArticleConnectionSlug]
  category: [ArticleConnectionCategory]
  image: [ArticleConnectionImage]
  author: [ArticleConnectionAuthor]
  test: [ArticleConnectionTest]
  published_at: [ArticleConnectionPublished_at]
}

type ArticleConnectionId {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionCreated_at {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionUpdated_at {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionTitle {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionDescription {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionContent {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionSlug {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionCategory {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionImage {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionAuthor {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionTest {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionPublished_at {
  key: DateTime
  connection: ArticleConnection
}

input ArticleInput {
  title: String!
  description: String!
  content: String!
  slug: String!
  category: ID
  image: ID
  author: ID
  test: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editArticleInput {
  title: String
  description: String
  content: String
  slug: String
  category: ID
  image: ID
  author: ID
  test: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

type Banner {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  published_at: DateTime
  image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input BannerInput {
  title: String
  image: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editBannerInput {
  title: String
  image: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateBannerInput {
  data: editBannerInput
}

type updateBannerPayload {
  banner: Banner
}

type deleteBannerPayload {
  banner: Banner
}

type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String!
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryGroupBy {
  id: [CategoryConnectionId]
  created_at: [CategoryConnectionCreated_at]
  updated_at: [CategoryConnectionUpdated_at]
  name: [CategoryConnectionName]
  slug: [CategoryConnectionSlug]
}

type CategoryConnectionId {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionUpdated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionName {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionSlug {
  key: String
  connection: CategoryConnection
}

input CategoryInput {
  name: String!
  slug: String!
  articles: [ID]
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  name: String
  slug: String
  articles: [ID]
  created_by: ID
  updated_by: ID
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

type Clients {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  image: UploadFile
  title: String
  published_at: DateTime
}

type ClientsConnection {
  values: [Clients]
  groupBy: ClientsGroupBy
  aggregate: ClientsAggregator
}

type ClientsAggregator {
  count: Int
  totalCount: Int
}

type ClientsGroupBy {
  id: [ClientsConnectionId]
  created_at: [ClientsConnectionCreated_at]
  updated_at: [ClientsConnectionUpdated_at]
  image: [ClientsConnectionImage]
  title: [ClientsConnectionTitle]
  published_at: [ClientsConnectionPublished_at]
}

type ClientsConnectionId {
  key: ID
  connection: ClientsConnection
}

type ClientsConnectionCreated_at {
  key: DateTime
  connection: ClientsConnection
}

type ClientsConnectionUpdated_at {
  key: DateTime
  connection: ClientsConnection
}

type ClientsConnectionImage {
  key: ID
  connection: ClientsConnection
}

type ClientsConnectionTitle {
  key: String
  connection: ClientsConnection
}

type ClientsConnectionPublished_at {
  key: DateTime
  connection: ClientsConnection
}

input ClientInput {
  image: ID
  title: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editClientInput {
  image: ID
  title: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createClientInput {
  data: ClientInput
}

type createClientPayload {
  client: Clients
}

input updateClientInput {
  where: InputID
  data: editClientInput
}

type updateClientPayload {
  client: Clients
}

input deleteClientInput {
  where: InputID
}

type deleteClientPayload {
  client: Clients
}

type Features {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Description: String
  icon: UploadFile
  url: String
  icons: String
  published_at: DateTime
}

type FeaturesConnection {
  values: [Features]
  groupBy: FeaturesGroupBy
  aggregate: FeaturesAggregator
}

type FeaturesAggregator {
  count: Int
  totalCount: Int
}

type FeaturesGroupBy {
  id: [FeaturesConnectionId]
  created_at: [FeaturesConnectionCreated_at]
  updated_at: [FeaturesConnectionUpdated_at]
  Title: [FeaturesConnectionTitle]
  Description: [FeaturesConnectionDescription]
  icon: [FeaturesConnectionIcon]
  url: [FeaturesConnectionUrl]
  icons: [FeaturesConnectionIcons]
  published_at: [FeaturesConnectionPublished_at]
}

type FeaturesConnectionId {
  key: ID
  connection: FeaturesConnection
}

type FeaturesConnectionCreated_at {
  key: DateTime
  connection: FeaturesConnection
}

type FeaturesConnectionUpdated_at {
  key: DateTime
  connection: FeaturesConnection
}

type FeaturesConnectionTitle {
  key: String
  connection: FeaturesConnection
}

type FeaturesConnectionDescription {
  key: String
  connection: FeaturesConnection
}

type FeaturesConnectionIcon {
  key: ID
  connection: FeaturesConnection
}

type FeaturesConnectionUrl {
  key: String
  connection: FeaturesConnection
}

type FeaturesConnectionIcons {
  key: String
  connection: FeaturesConnection
}

type FeaturesConnectionPublished_at {
  key: DateTime
  connection: FeaturesConnection
}

input FeatureInput {
  Title: String
  Description: String
  icon: ID
  url: String
  icons: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFeatureInput {
  Title: String
  Description: String
  icon: ID
  url: String
  icons: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createFeatureInput {
  data: FeatureInput
}

type createFeaturePayload {
  feature: Features
}

input updateFeatureInput {
  where: InputID
  data: editFeatureInput
}

type updateFeaturePayload {
  feature: Features
}

input deleteFeatureInput {
  where: InputID
}

type deleteFeaturePayload {
  feature: Features
}

type Global {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  favicon: UploadFile
  siteName: String!
  defaultSeo: ComponentSharedSeo
  Footer: ComponentSharedFooter
}

input GlobalInput {
  favicon: ID
  siteName: String!
  defaultSeo: ComponentSharedSeoInput!
  Footer: ComponentSharedFooterInput
  created_by: ID
  updated_by: ID
}

input editGlobalInput {
  favicon: ID
  siteName: String
  defaultSeo: editComponentSharedSeoInput
  Footer: editComponentSharedFooterInput
  created_by: ID
  updated_by: ID
}

input updateGlobalInput {
  data: editGlobalInput
}

type updateGlobalPayload {
  global: Global
}

type deleteGlobalPayload {
  global: Global
}

type Homepage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  seo: ComponentSharedSeo
  hero: ComponentSectionsHero
  Aboutus: ComponentSharedAboutUs
  info: ComponentSharedInfo
  banner1: ComponentSharedBanner1
}

input HomepageInput {
  seo: ComponentSharedSeoInput
  hero: ComponentSectionsHeroInput!
  Aboutus: ComponentSharedAboutUsInput
  info: ComponentSharedInfoInput
  banner1: ComponentSharedBanner1Input
  created_by: ID
  updated_by: ID
}

input editHomepageInput {
  seo: editComponentSharedSeoInput
  hero: editComponentSectionsHeroInput
  Aboutus: editComponentSharedAboutUsInput
  info: editComponentSharedInfoInput
  banner1: editComponentSharedBanner1Input
  created_by: ID
  updated_by: ID
}

input updateHomepageInput {
  data: editHomepageInput
}

type updateHomepagePayload {
  homepage: Homepage
}

type deleteHomepagePayload {
  homepage: Homepage
}

type Products {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  image: UploadFile
  url: String
  icons: String
  published_at: DateTime
}

type ProductsConnection {
  values: [Products]
  groupBy: ProductsGroupBy
  aggregate: ProductsAggregator
}

type ProductsAggregator {
  count: Int
  totalCount: Int
}

type ProductsGroupBy {
  id: [ProductsConnectionId]
  created_at: [ProductsConnectionCreated_at]
  updated_at: [ProductsConnectionUpdated_at]
  title: [ProductsConnectionTitle]
  description: [ProductsConnectionDescription]
  image: [ProductsConnectionImage]
  url: [ProductsConnectionUrl]
  icons: [ProductsConnectionIcons]
  published_at: [ProductsConnectionPublished_at]
}

type ProductsConnectionId {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionCreated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionUpdated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionTitle {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionDescription {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionImage {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionUrl {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionIcons {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionPublished_at {
  key: DateTime
  connection: ProductsConnection
}

input ProductInput {
  title: String
  description: String
  image: ID
  url: String
  icons: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProductInput {
  title: String
  description: String
  image: ID
  url: String
  icons: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Products
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Products
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Products
}

type Projects {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  url: String
  image: UploadFile
  published_at: DateTime
}

type ProjectsConnection {
  values: [Projects]
  groupBy: ProjectsGroupBy
  aggregate: ProjectsAggregator
}

type ProjectsAggregator {
  count: Int
  totalCount: Int
}

type ProjectsGroupBy {
  id: [ProjectsConnectionId]
  created_at: [ProjectsConnectionCreated_at]
  updated_at: [ProjectsConnectionUpdated_at]
  title: [ProjectsConnectionTitle]
  description: [ProjectsConnectionDescription]
  url: [ProjectsConnectionUrl]
  image: [ProjectsConnectionImage]
  published_at: [ProjectsConnectionPublished_at]
}

type ProjectsConnectionId {
  key: ID
  connection: ProjectsConnection
}

type ProjectsConnectionCreated_at {
  key: DateTime
  connection: ProjectsConnection
}

type ProjectsConnectionUpdated_at {
  key: DateTime
  connection: ProjectsConnection
}

type ProjectsConnectionTitle {
  key: String
  connection: ProjectsConnection
}

type ProjectsConnectionDescription {
  key: String
  connection: ProjectsConnection
}

type ProjectsConnectionUrl {
  key: String
  connection: ProjectsConnection
}

type ProjectsConnectionImage {
  key: ID
  connection: ProjectsConnection
}

type ProjectsConnectionPublished_at {
  key: DateTime
  connection: ProjectsConnection
}

input ProjectInput {
  title: String
  description: String
  url: String
  image: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProjectInput {
  title: String
  description: String
  url: String
  image: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createProjectInput {
  data: ProjectInput
}

type createProjectPayload {
  project: Projects
}

input updateProjectInput {
  where: InputID
  data: editProjectInput
}

type updateProjectPayload {
  project: Projects
}

input deleteProjectInput {
  where: InputID
}

type deleteProjectPayload {
  project: Projects
}

type Slider {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  subtitle: String
  description: String
  url: String
  bimage: UploadFile
  simage: UploadFile
  published_at: DateTime
}

type SliderConnection {
  values: [Slider]
  groupBy: SliderGroupBy
  aggregate: SliderAggregator
}

type SliderAggregator {
  count: Int
  totalCount: Int
}

type SliderGroupBy {
  id: [SliderConnectionId]
  created_at: [SliderConnectionCreated_at]
  updated_at: [SliderConnectionUpdated_at]
  title: [SliderConnectionTitle]
  subtitle: [SliderConnectionSubtitle]
  description: [SliderConnectionDescription]
  url: [SliderConnectionUrl]
  bimage: [SliderConnectionBimage]
  simage: [SliderConnectionSimage]
  published_at: [SliderConnectionPublished_at]
}

type SliderConnectionId {
  key: ID
  connection: SliderConnection
}

type SliderConnectionCreated_at {
  key: DateTime
  connection: SliderConnection
}

type SliderConnectionUpdated_at {
  key: DateTime
  connection: SliderConnection
}

type SliderConnectionTitle {
  key: String
  connection: SliderConnection
}

type SliderConnectionSubtitle {
  key: String
  connection: SliderConnection
}

type SliderConnectionDescription {
  key: String
  connection: SliderConnection
}

type SliderConnectionUrl {
  key: String
  connection: SliderConnection
}

type SliderConnectionBimage {
  key: ID
  connection: SliderConnection
}

type SliderConnectionSimage {
  key: ID
  connection: SliderConnection
}

type SliderConnectionPublished_at {
  key: DateTime
  connection: SliderConnection
}

input SliderInput {
  title: String
  subtitle: String
  description: String
  url: String
  bimage: ID
  simage: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSliderInput {
  title: String
  subtitle: String
  description: String
  url: String
  bimage: ID
  simage: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSliderInput {
  data: SliderInput
}

type createSliderPayload {
  slider: Slider
}

input updateSliderInput {
  where: InputID
  data: editSliderInput
}

type updateSliderPayload {
  slider: Slider
}

input deleteSliderInput {
  where: InputID
}

type deleteSliderPayload {
  slider: Slider
}

type Testimonials {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  image: UploadFile
  designation: String
  published_at: DateTime
}

type TestimonialsConnection {
  values: [Testimonials]
  groupBy: TestimonialsGroupBy
  aggregate: TestimonialsAggregator
}

type TestimonialsAggregator {
  count: Int
  totalCount: Int
}

type TestimonialsGroupBy {
  id: [TestimonialsConnectionId]
  created_at: [TestimonialsConnectionCreated_at]
  updated_at: [TestimonialsConnectionUpdated_at]
  title: [TestimonialsConnectionTitle]
  description: [TestimonialsConnectionDescription]
  image: [TestimonialsConnectionImage]
  designation: [TestimonialsConnectionDesignation]
  published_at: [TestimonialsConnectionPublished_at]
}

type TestimonialsConnectionId {
  key: ID
  connection: TestimonialsConnection
}

type TestimonialsConnectionCreated_at {
  key: DateTime
  connection: TestimonialsConnection
}

type TestimonialsConnectionUpdated_at {
  key: DateTime
  connection: TestimonialsConnection
}

type TestimonialsConnectionTitle {
  key: String
  connection: TestimonialsConnection
}

type TestimonialsConnectionDescription {
  key: String
  connection: TestimonialsConnection
}

type TestimonialsConnectionImage {
  key: ID
  connection: TestimonialsConnection
}

type TestimonialsConnectionDesignation {
  key: String
  connection: TestimonialsConnection
}

type TestimonialsConnectionPublished_at {
  key: DateTime
  connection: TestimonialsConnection
}

input TestimonialInput {
  title: String
  description: String
  image: ID
  designation: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editTestimonialInput {
  title: String
  description: String
  image: ID
  designation: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createTestimonialInput {
  data: TestimonialInput
}

type createTestimonialPayload {
  testimonial: Testimonials
}

input updateTestimonialInput {
  where: InputID
  data: editTestimonialInput
}

type updateTestimonialPayload {
  testimonial: Testimonials
}

input deleteTestimonialInput {
  where: InputID
}

type deleteTestimonialPayload {
  testimonial: Testimonials
}

type Writer {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  picture: UploadFile
  email: String
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
}

type WriterConnection {
  values: [Writer]
  groupBy: WriterGroupBy
  aggregate: WriterAggregator
}

type WriterAggregator {
  count: Int
  totalCount: Int
}

type WriterGroupBy {
  id: [WriterConnectionId]
  created_at: [WriterConnectionCreated_at]
  updated_at: [WriterConnectionUpdated_at]
  name: [WriterConnectionName]
  picture: [WriterConnectionPicture]
  email: [WriterConnectionEmail]
}

type WriterConnectionId {
  key: ID
  connection: WriterConnection
}

type WriterConnectionCreated_at {
  key: DateTime
  connection: WriterConnection
}

type WriterConnectionUpdated_at {
  key: DateTime
  connection: WriterConnection
}

type WriterConnectionName {
  key: String
  connection: WriterConnection
}

type WriterConnectionPicture {
  key: ID
  connection: WriterConnection
}

type WriterConnectionEmail {
  key: String
  connection: WriterConnection
}

input WriterInput {
  name: String
  picture: ID
  articles: [ID]
  email: String
  created_by: ID
  updated_by: ID
}

input editWriterInput {
  name: String
  picture: ID
  articles: [ID]
  email: String
  created_by: ID
  updated_by: ID
}

input createWriterInput {
  data: WriterInput
}

type createWriterPayload {
  writer: Writer
}

input updateWriterInput {
  where: InputID
  data: editWriterInput
}

type updateWriterPayload {
  writer: Writer
}

input deleteWriterInput {
  where: InputID
}

type deleteWriterPayload {
  writer: Writer
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentSectionsHero {
  id: ID!
  title: String!
}

input ComponentSectionsHeroInput {
  title: String!
}

input editComponentSectionsHeroInput {
  id: ID
  title: String
}

type ComponentSharedAboutUs {
  id: ID!
  title: String
  description: String
  image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentSharedAboutUsInput {
  title: String
  description: String
  image: [ID]
}

input editComponentSharedAboutUsInput {
  id: ID
  title: String
  description: String
  image: [ID]
}

type ComponentSharedBanner {
  id: ID!
}

input ComponentSharedBannerInput {
  _: String
}

input editComponentSharedBannerInput {
  id: ID
}

type ComponentSharedBanner1 {
  id: ID!
  title: String
  image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentSharedBanner1Input {
  title: String
  image: [ID]
}

input editComponentSharedBanner1Input {
  id: ID
  title: String
  image: [ID]
}

type ComponentSharedFooter {
  id: ID!
  address: String
  number: String
  number1: String
  duns: String
  email: String
  copyright: String
  content: String
}

input ComponentSharedFooterInput {
  address: String
  number: String
  number1: String
  duns: String
  email: String
  copyright: String
  content: String
}

input editComponentSharedFooterInput {
  id: ID
  address: String
  number: String
  number1: String
  duns: String
  email: String
  copyright: String
  content: String
}

type ComponentSharedInfo {
  id: ID!
  title: String
  description: String
}

input ComponentSharedInfoInput {
  title: String
  description: String
}

input editComponentSharedInfoInput {
  id: ID
  title: String
  description: String
}

type ComponentSharedSeo {
  id: ID!
  metaTitle: String!
  metaDescription: String!
  shareImage: UploadFile
}

input ComponentSharedSeoInput {
  metaTitle: String!
  metaDescription: String!
  shareImage: ID
}

input editComponentSharedSeoInput {
  id: ID
  metaTitle: String
  metaDescription: String
  shareImage: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Article | ArticleConnection | ArticleAggregator | ArticleGroupBy | ArticleConnectionId | ArticleConnectionCreated_at | ArticleConnectionUpdated_at | ArticleConnectionTitle | ArticleConnectionDescription | ArticleConnectionContent | ArticleConnectionSlug | ArticleConnectionCategory | ArticleConnectionImage | ArticleConnectionAuthor | ArticleConnectionTest | ArticleConnectionPublished_at | createArticlePayload | updateArticlePayload | deleteArticlePayload | Banner | updateBannerPayload | deleteBannerPayload | Category | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnectionId | CategoryConnectionCreated_at | CategoryConnectionUpdated_at | CategoryConnectionName | CategoryConnectionSlug | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Clients | ClientsConnection | ClientsAggregator | ClientsGroupBy | ClientsConnectionId | ClientsConnectionCreated_at | ClientsConnectionUpdated_at | ClientsConnectionImage | ClientsConnectionTitle | ClientsConnectionPublished_at | createClientPayload | updateClientPayload | deleteClientPayload | Features | FeaturesConnection | FeaturesAggregator | FeaturesGroupBy | FeaturesConnectionId | FeaturesConnectionCreated_at | FeaturesConnectionUpdated_at | FeaturesConnectionTitle | FeaturesConnectionDescription | FeaturesConnectionIcon | FeaturesConnectionUrl | FeaturesConnectionIcons | FeaturesConnectionPublished_at | createFeaturePayload | updateFeaturePayload | deleteFeaturePayload | Global | updateGlobalPayload | deleteGlobalPayload | Homepage | updateHomepagePayload | deleteHomepagePayload | Products | ProductsConnection | ProductsAggregator | ProductsGroupBy | ProductsConnectionId | ProductsConnectionCreated_at | ProductsConnectionUpdated_at | ProductsConnectionTitle | ProductsConnectionDescription | ProductsConnectionImage | ProductsConnectionUrl | ProductsConnectionIcons | ProductsConnectionPublished_at | createProductPayload | updateProductPayload | deleteProductPayload | Projects | ProjectsConnection | ProjectsAggregator | ProjectsGroupBy | ProjectsConnectionId | ProjectsConnectionCreated_at | ProjectsConnectionUpdated_at | ProjectsConnectionTitle | ProjectsConnectionDescription | ProjectsConnectionUrl | ProjectsConnectionImage | ProjectsConnectionPublished_at | createProjectPayload | updateProjectPayload | deleteProjectPayload | Slider | SliderConnection | SliderAggregator | SliderGroupBy | SliderConnectionId | SliderConnectionCreated_at | SliderConnectionUpdated_at | SliderConnectionTitle | SliderConnectionSubtitle | SliderConnectionDescription | SliderConnectionUrl | SliderConnectionBimage | SliderConnectionSimage | SliderConnectionPublished_at | createSliderPayload | updateSliderPayload | deleteSliderPayload | Testimonials | TestimonialsConnection | TestimonialsAggregator | TestimonialsGroupBy | TestimonialsConnectionId | TestimonialsConnectionCreated_at | TestimonialsConnectionUpdated_at | TestimonialsConnectionTitle | TestimonialsConnectionDescription | TestimonialsConnectionImage | TestimonialsConnectionDesignation | TestimonialsConnectionPublished_at | createTestimonialPayload | updateTestimonialPayload | deleteTestimonialPayload | Writer | WriterConnection | WriterAggregator | WriterGroupBy | WriterConnectionId | WriterConnectionCreated_at | WriterConnectionUpdated_at | WriterConnectionName | WriterConnectionPicture | WriterConnectionEmail | createWriterPayload | updateWriterPayload | deleteWriterPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentSectionsHero | ComponentSharedAboutUs | ComponentSharedBanner | ComponentSharedBanner1 | ComponentSharedFooter | ComponentSharedInfo | ComponentSharedSeo

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  article(id: ID!, publicationState: PublicationState): Article
  articles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Article]
  articlesConnection(sort: String, limit: Int, start: Int, where: JSON): ArticleConnection
  banner(publicationState: PublicationState): Banner
  category(id: ID!, publicationState: PublicationState): Category
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Category]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  client(id: ID!, publicationState: PublicationState): Clients
  clients(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Clients]
  clientsConnection(sort: String, limit: Int, start: Int, where: JSON): ClientsConnection
  feature(id: ID!, publicationState: PublicationState): Features
  features(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Features]
  featuresConnection(sort: String, limit: Int, start: Int, where: JSON): FeaturesConnection
  global(publicationState: PublicationState): Global
  homepage(publicationState: PublicationState): Homepage
  product(id: ID!, publicationState: PublicationState): Products
  products(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Products]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductsConnection
  project(id: ID!, publicationState: PublicationState): Projects
  projects(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Projects]
  projectsConnection(sort: String, limit: Int, start: Int, where: JSON): ProjectsConnection
  slider(id: ID!, publicationState: PublicationState): Slider
  sliders(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Slider]
  slidersConnection(sort: String, limit: Int, start: Int, where: JSON): SliderConnection
  testimonial(id: ID!, publicationState: PublicationState): Testimonials
  testimonials(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Testimonials]
  testimonialsConnection(sort: String, limit: Int, start: Int, where: JSON): TestimonialsConnection
  writer(id: ID!, publicationState: PublicationState): Writer
  writers(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Writer]
  writersConnection(sort: String, limit: Int, start: Int, where: JSON): WriterConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  updateBanner(input: updateBannerInput): updateBannerPayload
  deleteBanner: deleteBannerPayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createClient(input: createClientInput): createClientPayload
  updateClient(input: updateClientInput): updateClientPayload
  deleteClient(input: deleteClientInput): deleteClientPayload
  createFeature(input: createFeatureInput): createFeaturePayload
  updateFeature(input: updateFeatureInput): updateFeaturePayload
  deleteFeature(input: deleteFeatureInput): deleteFeaturePayload
  updateGlobal(input: updateGlobalInput): updateGlobalPayload
  deleteGlobal: deleteGlobalPayload
  updateHomepage(input: updateHomepageInput): updateHomepagePayload
  deleteHomepage: deleteHomepagePayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createProject(input: createProjectInput): createProjectPayload
  updateProject(input: updateProjectInput): updateProjectPayload
  deleteProject(input: deleteProjectInput): deleteProjectPayload
  createSlider(input: createSliderInput): createSliderPayload
  updateSlider(input: updateSliderInput): updateSliderPayload
  deleteSlider(input: deleteSliderInput): deleteSliderPayload
  createTestimonial(input: createTestimonialInput): createTestimonialPayload
  updateTestimonial(input: updateTestimonialInput): updateTestimonialPayload
  deleteTestimonial(input: deleteTestimonialInput): deleteTestimonialPayload
  createWriter(input: createWriterInput): createWriterPayload
  updateWriter(input: updateWriterInput): updateWriterPayload
  deleteWriter(input: deleteWriterInput): deleteWriterPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
